﻿
@model CollaborativePresentation.Models.Presentation
@{
    ViewData["Title"] = "Present - " + Model.Title;
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <style>
        body, html {
            height: 100%;
            margin: 0;
            padding: 0;
            background: #000;
            color: white;
            overflow: hidden;
        }

        .presentation-container {
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .presentation-header {
            background: rgba(0,0,0,0.8);
            padding: 10px 20px;
            display: flex;
            justify-content: between;
            align-items: center;
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            z-index: 1000;
            transition: opacity 0.3s;
        }

            .presentation-header.hidden {
                opacity: 0;
                pointer-events: none;
            }

        .slide-area {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            background: white;
            margin: 0;
        }

        .slide-content {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: white;
        }

        .slide-svg {
            max-width: 100%;
            max-height: 100%;
            width: auto;
            height: auto;
        }

        .slide-navigation {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 10px;
            background: rgba(0,0,0,0.7);
            padding: 10px 20px;
            border-radius: 25px;
            transition: opacity 0.3s;
        }

            .slide-navigation.hidden {
                opacity: 0;
                pointer-events: none;
            }

        .nav-btn {
            background: rgba(255,255,255,0.2);
            border: none;
            color: white;
            padding: 8px 12px;
            border-radius: 20px;
            cursor: pointer;
            transition: background 0.2s;
        }

            .nav-btn:hover {
                background: rgba(255,255,255,0.3);
            }

            .nav-btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }

        .slide-counter {
            color: white;
            padding: 8px 16px;
            background: rgba(255,255,255,0.1);
            border-radius: 20px;
            font-size: 14px;
        }

        .presentation-title {
            font-size: 18px;
            font-weight: 600;
        }

        .controls {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .btn-control {
            background: rgba(255,255,255,0.2);
            border: 1px solid rgba(255,255,255,0.3);
            color: white;
            padding: 6px 12px;
            border-radius: 20px;
            text-decoration: none;
            font-size: 14px;
            transition: background 0.2s;
        }

            .btn-control:hover {
                background: rgba(255,255,255,0.3);
                color: white;
                text-decoration: none;
            }

        .fullscreen-toggle {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(0,0,0,0.7);
            border: none;
            color: white;
            padding: 10px;
            border-radius: 50%;
            cursor: pointer;
            transition: opacity 0.3s;
        }

            .fullscreen-toggle.hidden {
                opacity: 0;
                pointer-events: none;
            }

        .empty-slide {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100%;
            height: 100%;
            color: #666;
            font-size: 24px;
            background: #f8f9fa;
        }
    </style>
</head>
<body>
    <div class="presentation-container">
        <!-- Header -->
        <div class="presentation-header" id="header">
            <div>
                <h1 class="presentation-title mb-0">@Model.Title</h1>
            </div>
            <div class="controls">
                <a href="@Url.Action("Edit", new { id = Model.Id })" class="btn-control">
                    <i class="fas fa-edit me-1"></i>
                    Edit
                </a>
                <a href="@Url.Action("Presentations", "Home")" class="btn-control">
                    <i class="fas fa-list me-1"></i>
                    All Presentations
                </a>
            </div>
        </div>

        <!-- Fullscreen Toggle -->
        <button class="fullscreen-toggle" id="fullscreenBtn" onclick="toggleFullscreen()">
            <i class="fas fa-expand"></i>
        </button>

        <!-- Slide Area -->
        <div class="slide-area" id="slideArea">
            <div class="slide-content" id="slideContent">
                <!-- Slide content will be loaded here -->
            </div>
        </div>

        <!-- Navigation -->
        <div class="slide-navigation" id="navigation">
            <button class="nav-btn" id="prevBtn" onclick="previousSlide()">
                <i class="fas fa-chevron-left"></i>
            </button>
            <div class="slide-counter" id="slideCounter">
                @{
                    var slideCount = Model.Slides?.Count() ?? 0;
                    var countText = slideCount > 0 ? $"1 / {slideCount}" : "0 / 0";
                }
                @countText
            </div>
            <button class="nav-btn" id="nextBtn" onclick="nextSlide()">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script>
        // Debug the model data
        console.log("Model slides count:", @Model.Slides.Count());
        
        // Explicitly define the slide data to ensure proper serialization
        let slideData = [];
        
        @if (Model.Slides.Any())
        {
            <text>
            slideData = [
                @foreach (var slide in Model.Slides.OrderBy(s => s.Order))
                {
                    <text>{id: @slide.Id, order: @slide.Order},</text>
                }
            ];
            </text>
        }
        else
        {
            <text>
            // No slides found, create a dummy slide
            slideData = [{id: -1, order: 1}];
            $('#slideContent').html('<div class="empty-slide">No slides found in this presentation</div>');
            </text>
        }
        
        console.log("Slides from model (direct):", slideData);
        let slides = slideData;
        let currentSlideIndex = 0;
        let controlsVisible = true;
        let hideControlsTimeout;

        $(document).ready(function() {
            loadSlide(currentSlideIndex);
            updateNavigation();

            // Auto-hide controls after 3 seconds of inactivity
            resetHideTimer();

            // Show controls on mouse move
            $(document).mousemove(function() {
                showControls();
                resetHideTimer();
            });

            // Keyboard navigation
            $(document).keydown(function(e) {
                switch(e.which) {
                    case 37: // Left arrow
                    case 38: // Up arrow
                        previousSlide();
                        break;
                    case 39: // Right arrow
                    case 40: // Down arrow
                    case 32: // Space
                        nextSlide();
                        break;
                    case 27: // Escape
                        if (document.fullscreenElement) {
                            document.exitFullscreen();
                        }
                        break;
                    case 70: // F key
                        toggleFullscreen();
                        break;
                }
                e.preventDefault();
            });
        });

        function loadSlide(index) {
            if (index < 0 || index >= slides.length) {
                console.error(`Invalid slide index: ${index}, slides length: ${slides.length}`);
                return;
            }

            const slide = slides[index];
            console.log(`Loading slide at index ${index}, slide:`, slide);
            
            // Validate slide data
            if (!slide || typeof slide.id === 'undefined') {
                console.error('Invalid slide data:', slide);
                $('#slideContent').html('<div class="empty-slide">Error: Invalid slide data</div>');
                return;
            }
            
            const slideId = slide.id;
            const slideContent = $('#slideContent');
            
            // Show loading indicator
            slideContent.html('<div class="empty-slide">Loading slide...</div>');

            // Try two different approaches to load the slide content
            
            // First attempt: Use the direct SVG endpoint
            const directSvgUrl = `/Home/GetSlideSvg?slideId=${slideId}`;
            console.log(`Trying to load slide directly from ${directSvgUrl}`);
            
            // Create an image to load the SVG
            const img = new Image();
            img.onload = function() {
                console.log('SVG image loaded successfully');
                // Use a direct fetch request instead of object tag to avoid potential issues
                fetch(directSvgUrl)
                    .then(response => response.text())
                    .then(svgText => {
                        console.log('SVG fetched directly, length:', svgText.length);
                        slideContent.html(svgText);
                        slideContent.find('svg').addClass('slide-svg');
                    })
                    .catch(error => {
                        console.error('Error fetching SVG content:', error);
                        // Fallback to object tag if fetch fails
                        slideContent.html(`<object data="${directSvgUrl}" type="image/svg+xml" class="slide-svg"></object>`);
                    });
            };
            
            img.onerror = function() {
                console.log('SVG image failed to load, falling back to AJAX method');
                
                // Fallback: Use the JSON endpoint
                $.ajax({
                    url: `/Home/GetSlideData?slideId=${slideId}`,
                    type: 'GET',
                    dataType: 'json',
                    success: function(response) {
                        console.log('GetSlideData response:', response);
                        
                        if (response.success) {
                            if (response.svgData && response.svgData.trim()) {
                                // Check if SVG data starts with <svg tag
                                if (response.svgData.trim().startsWith('<svg')) {
                                    console.log('Valid SVG data received, length:', response.svgData.length);
                                    slideContent.html(response.svgData);
                                    // Ensure SVG scales properly
                                    slideContent.find('svg').addClass('slide-svg');
                                } else if (response.svgData.trim().startsWith('{')) {
                                    // This might be JSON data saved by the editor
                                    console.log('JSON data received instead of SVG');
                                    slideContent.html('<div class="empty-slide">Slide content is in JSON format (not viewable in presentation mode)</div>');
                                } else {
                                    // Try to extract SVG content from the data
                                    var svgStart = response.svgData.indexOf('<svg');
                                    var svgEnd = response.svgData.lastIndexOf('</svg>') + 6;
                                    
                                    if (svgStart >= 0 && svgEnd > svgStart) {
                                        var extractedSvg = response.svgData.substring(svgStart, svgEnd);
                                        console.log('Extracted SVG from data, length:', extractedSvg.length);
                                        slideContent.html(extractedSvg);
                                        slideContent.find('svg').addClass('slide-svg');
                                    } else {
                                        console.log('Invalid SVG format:', response.svgData.substring(0, 100) + '...');
                                        slideContent.html('<div class="empty-slide">Invalid slide format</div>');
                                    }
                                }
                            } else {
                                console.log('Empty SVG data received');
                                slideContent.html('<div class="empty-slide">Empty Slide</div>');
                            }
                        } else {
                            console.error('Error response:', response.message);
                            // Try one more method - create an iframe to the presentation controller's GetSvg endpoint
                            const svgUrl = `/Presentation/GetSvg?slideId=${slideId}`;
                            console.log(`Attempting third method with ${svgUrl}`);
                            
                            slideContent.html(`<iframe src="${svgUrl}" style="width:100%; height:100%; border:none;" class="slide-svg"></iframe>`);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('AJAX error:', status, error);
                        slideContent.html('<div class="empty-slide">Error loading slide: ' + error + '</div>');
                    }
                });
            };
            
            // Start loading the SVG image
            img.src = directSvgUrl;
        }

        function nextSlide() {
            if (currentSlideIndex < slides.length - 1) {
                currentSlideIndex++;
                loadSlide(currentSlideIndex);
                updateNavigation();
            }
        }

        function previousSlide() {
            if (currentSlideIndex > 0) {
                currentSlideIndex--;
                loadSlide(currentSlideIndex);
                updateNavigation();
            }
        }

        function updateNavigation() {
            $('#slideCounter').text(`${currentSlideIndex + 1} / ${slides.length}`);
            $('#prevBtn').prop('disabled', currentSlideIndex === 0);
            $('#nextBtn').prop('disabled', currentSlideIndex === slides.length - 1);
        }

        function toggleFullscreen() {
            if (!document.fullscreenElement) {
                document.documentElement.requestFullscreen();
                $('#fullscreenBtn i').removeClass('fa-expand').addClass('fa-compress');
            } else {
                document.exitFullscreen();
                $('#fullscreenBtn i').removeClass('fa-compress').addClass('fa-expand');
            }
        }

        function showControls() {
            if (!controlsVisible) {
                $('#header, #navigation, #fullscreenBtn').removeClass('hidden');
                controlsVisible = true;
            }
        }

        function hideControls() {
            $('#header, #navigation, #fullscreenBtn').addClass('hidden');
            controlsVisible = false;
        }

        function resetHideTimer() {
            clearTimeout(hideControlsTimeout);
            hideControlsTimeout = setTimeout(hideControls, 3000);
        }

        // Handle fullscreen change
        document.addEventListener('fullscreenchange', function() {
            if (document.fullscreenElement) {
                $('#fullscreenBtn i').removeClass('fa-expand').addClass('fa-compress');
            } else {
                $('#fullscreenBtn i').removeClass('fa-compress').addClass('fa-expand');
            }
        });
    </script>
</body>
</html>